"use strict";

//==========
// JavaScript文法
// Level_02

//==========
// [定数を使ってみよう]
//   1, 定数は、宣言時に値を確定させます
//   2, 定数は値を変更することができません
//   3, 定数を使う事でバグを減らす事ができます

// 定数を宣言して初期化する
const hoge = 100;
console.log(hoge);

//hoge = 200;// 定数の値を変更しようとしたのでエラー
//console.log(hoge);

//==========
// [true / falseを使ってみよう]
//   1, trueには"真", falseには"偽"という意味があります
//   2, ifとセットで使う事が多く、判定に使います
//   3, "true / false"は、変数に格納することができます

// 変数を宣言して初期値を"true"にする
let fuga = true;
console.log(fuga);

// もしfugaが"true"だったら...
if(fuga){
	console.log("貴様、見ているな!!");
}

// 変数を宣言して初期値を"false"にする
let piyo = false;
console.log(piyo);

// もしpiyoが"true"だったら...
if(piyo){
	console.log("ロードローラーだ!!");
}

//==========
// [2つに分岐する判定をしてみよう]
//   1, elseは、if文とセットで記述します
//   2, elseには"その他"という意味があります
//   3, 必ずどちらかの分岐処理を行うことを覚えましょう

// 変数を宣言して初期値を"true"にする
let puyo = true;
console.log(puyo);

console.log("今日のお昼ご飯は...");
if(puyo){
	console.log("生姜焼き定食です!!");
}else{
	console.log("ビーフステーキセットです!!");
}

//==========
// [配列をつかってみよう]
//   1, 配列には、沢山のデータを格納することができます
//   2, [] 角カッコを使って宣言します
//   3, 添字(整数)を使ってそれぞれのデータにアクセスすることができます
//   4, 先頭のデータは添字[0]、2番目以降からは1,2,3...とアクセスします

// 配列を宣言して初期値を設定する
let teisyoku = ["ごはん", "みそしる", "しょうが焼き"];
console.log(teisyoku[0]);
console.log(teisyoku[1]);
console.log(teisyoku[2]);
//console.log(teisyoku[3]);// これはエラーです

// 配列に格納されている値を変更する
teisyoku[0] = "パン";
teisyoku[1] = "赤ワイン";
teisyoku[2] = "ビーフステーキ";
console.log(teisyoku[0]);
console.log(teisyoku[1]);
console.log(teisyoku[2]);

//==========
// [配列とfor文]
//   1, for文を使うと、配列の要素に一つづつ順番にアクセスできます
//   2, lengthパラメーターは配列の要素数(総件数)を取得できます

// 配列を宣言して初期値を設定する
let family = ["ひろし", "みさえ", "しんちゃん", "シロ"];
// 配列に格納されている要素数を取得する
let total = family.length;

// 添字(i)を利用して配列の要素にアクセスする
for(let i=0; i<total; i++){
	console.log(family[i]);
}

// 配列を宣言して初期値を設定する
let ages = [35, 29, 5, 2];
for(let i=0; i<total; i++){
	// 一つの文章にまとめる(連結する)
	let str = family[i] + "は" + ages[i] + "歳です!!";
	console.log(str);
}

//==========
// [for文を2重に使ってみよう]
//   1, for文を2つ組み合わせる事ができます
//   2, 初期化部分で使う変数名(iとj)は同じにしない様にしましょう

console.log("掛け算自動計算システム")
// iの値が 1, 2, 3, 4, 5... 9まで繰り返す
for(let i=1; i<10; i++){
	console.log(i + "の段");
	// jの値が 1, 2, 3, 4, 5... 9まで繰り返す
	for(let j=1; j<10; j++){
		// iとjとを掛け算する
		console.log(i * j);
	}
}

//==========
// [関数を使ってみよう]
//   1, 関数は、処理を一つにまとめることができます
//   2, 処理のまとまりを何度も使い回すことができます
//   3, 関数を作っても、実行するまでは動きません

// 関数を定義する
function myFunction(){
	console.log("関数が実行された!!");
}

// 関数を実行する
myFunction();
// 関数を実行する
myFunction();
// 関数を実行する
myFunction();







// 判定
// if / && ||
// if / else if

// くり返し処理
// for(){for(){}}

// 配列と繰り返し処理
// array / for

// 関数
// function
// function(a, b)
// function() return

// スコープ
// scope / {}
// global / local







/*
//==========
// [コンソールを使ってみる]

console.log("Hello JavaScript!!");
console.log("Good morning!!");
console.log("Good afternoon!!");
console.log("Good evening!!");
// //を使うと、その行は実行されません
//console.log("Good night!!");

//==========
// [変数を使ってみよう]
//  1, letを使って変数を宣言します
//  2, 変数にデータを格納することができます
//  3, 変数の値を変更することができます

// 変数の宣言と初期化
let hoge = 100;
// 変数に格納されている値を確認
console.log(hoge);
// 変数の値を変更
hoge = 200;
// 変数に格納されている値を確認
console.log(hoge);
// 変数の値を変更
hoge = 300;
// 変数に格納されている値を確認
console.log(hoge);

// ** 追記 **
// 変数の命名規則について
//  1, 使用できる文字はUnicode文字、_(アンダースコア), $(ドル)
//  2, 1文字目には"数字"を使う事ができません
//  3, 大文字と小文字は区別されます
//  4, 予約後(プログラム上特別な意味がある言葉)は使えません

//==========
// [変数を使ってみよう]
//  1, 同じ変数名で、新しく変数を宣言することはできません
//  2, ""を使って文字列を格納することができます
//  3, 変数の値は変更することができます

// 変数の宣言と初期化
let fuga = "リンゴ";
// 変数に格納されている値を確認
console.log(fuga);
// 同じ変数名で、新しく変数を宣言することはできません
//let fuga = "ゴリラ";// これはエラーになります
// 変数の値を変更することはできます
fuga = "ゴリラ";
// 変数に格納されている値を確認
console.log(fuga);
// 変数の値を変更することはできます
fuga = "ラマヌジャン";
// 変数に格納されている値を確認
console.log(fuga);

//==========
// [計算をしてみよう]
//  1, 変数と変数を使って計算をする事ができます
//  2, +(足し算), -(引き算), *(掛け算), /(割り算), %(余り)
//  3, 数値+文字列の場合は、連結されて文字列になります

// 変数の宣言と初期化
let ramen = 800;
let gyoza = 300;
console.log(ramen + gyoza);

// 新しく変数を宣言し、計算結果を格納する
let total = ramen + gyoza;
console.log(total);

// 数値+文字列の場合は、連結されて文字列になります
console.log(total + "円です、まいどあり!!");

//==========
// [判定をしてみよう]
//  1, if を使って処理を振り分ける事ができます
//  2, == は、右の値と左の値が同じかどうかを判定します
//  3, < は、左の値がより小さいかどうかを判定します
//  4, > は、左の値がより大きいかどうかを判定します

// 変数を宣言して初期化する(フォロワー数)
let follower = 50;
// followerに格納されている値が、50と同じだったら...
if(follower == 50){
	console.log("50フォロワーぴったり達成!!");
}

// 変数を宣言して初期化する(身長)
let height = 190;
// heightに格納されている値が180より大きかったら...
if(height > 180){
	console.log("君、バスケ部に入らないか!?");
}

// 変数を宣言して初期化する(体重)
let weight = 55;
// weightに格納されている値が80より小さかったら...
if(weight < 80){
	console.log("もっと太ってから相撲部にきたまえ!!");
}

//==========
// [繰り返し文を使ってみよう while]
//  1, while の条件が満たされる間、繰り返し処理を実行します
//  2, 無限ループにならない様、判定条件に注意しましょう
//  3, += は、変数の値にプラスします
//  4, -= は、変数の値にマイナスをします

// 変数を初期化する
let money = 0;
// moneyの値が10000より小さいなら処理を繰り返す
while(money < 10000){
	console.log(money);
	money += 1000;// 1000を、moneyにプラスする
}
console.log(money + "円まで貯金が増えて草!!");

// moneyの値が0より大きいなら処理を繰り返す
while(money > 0){
	console.log(money);
	money -= 1000;// 1000を、moneyにマイナスする
}
console.log(money + "円になるまで使ってぴえん!!");

//==========
// [繰り返し文を使ってみよう for]
//  1, 特定の回数だけ、繰り返し処理をする事ができます
//  2, "初期化", "繰り返し条件", "後処理"にそれぞれ記述します
//  3, ++ は、変数の値を1だけプラスします

// 2回繰り返す処理 -> 0, 1と出力される
for(let i=0; i<2; i++){
	console.log(i);
}

// 3回繰り返す処理 -> 0, 1, 2と出力される
for(let i=0; i<3; i++){
	console.log(i);
}

// 4回繰り返す処理 -> 0, 1, 2, 3と出力される
for(let i=0; i<4; i++){
	console.log(i);
}

// 5回繰り返す処理 -> 0, 1, 2, 3, 4と出力される
for(let i=0; i<5; i++){
	console.log(i);
}
*/


