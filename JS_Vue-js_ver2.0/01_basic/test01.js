/*
JavaScriptについて

	JavaScriptとは!?
		ホームページで複雑な処理をできるようにするプログラミング言語です。

	HTMLから実行される
		HTMLとは、ホームページを構成する言語です。
		JavaScriptは、主にHTMLから呼び出されて実行されます。

予約語について

	予約語とは!?
		それ自体に特別な意味がある"予約された"キーワードです。

		例: (他にもあります)
			let: 変数
			const: 定数
			if: 分岐処理
			for: 繰り返し処理
			function: 関数

コンソールに文字を出力してみよう

	コンソール画面とは!?
		実行されたデータやエラー等を確認することができます。

	コンソール画面の開き方
		Chromeブラウザを開き、
		"メニュー -> その他のツール -> デベロッパーツール"の順に選択します。

*/

// コンソールに文字を書き出す
console.log("Hello World!!");

/* ====================================================================== */

/*
変数について

	変数とは!?
		"let"キーワードで名前を付け、データを格納する事ができます。
		基本的に1つの変数には1つのデータを格納する事ができます。
		"="の右側に、格納したいデータを記述します。

	例:
		let 変数名 = データ;

	変数名のルール(命名規則)
		変数名は、半角英数(0-9, a-z, A-Z, _)を使い好きな名前を付ける事ができます。
		このとき、英語の大文字と小文字は区別されるので注意してください。
		格納するデータが何なのかわかる様に名前を付ける様にしましょう。
		変数名の先頭には数字を使うことはできません。

	データを変更する事ができる
		"="キーワードで値を変更する事ができます。

	例:
		変数名 = データ;

*/

// 変数を宣言する
let myName1 = "サザエ";// これはOK
//let 9myData1 = "マスオ";// これはNG

// 変数の値を確認する
console.log(myName1);

// 変数のデータを変更する
myName1 = "マスオ";

// 変数の値を確認する
console.log(myName1);

/*
定数について

	定数とは!?
		"const"キーワードで名前を付け、データを格納する事ができます。
		変数と使い方は変わりませんが、データの変更はできません。

	例:
		const 定数名 = データ;
*/

// 定数を宣言する
const myName3 = "タラオ";

// 定数の値を変更する事はできません
//myName3 = "カツオ"// これはNG

// 定数の値を確認する
console.log(myName3);

/* ====================================================================== */

/*
データ型について

	データ型とは!?
		データ型とは、データそのものの種類の事です。

		例:
			文字列 -> 文字データ
			数値 -> 計算できる数値データ
			真偽値 -> trueかfalseいずれかのデータ
			配列 -> 複数のデータ
			オブジェクト -> 関連のあるデータと命令の集合

文字列について

	文字列とは、文字が連なった物のことです。
	" (ダブルクォーテーション)、もしくは、
	' (シングルクォーテーション)で文字を囲みます。
	+ (プラス)を使って文字列同士を連結する事ができます。
*/

// 変数を宣言する
let myName1 = "サザエ";
console.log(myName1);

// 変数を宣言する
let myName2 = "マスオ";
console.log(myName2);

// 文字列を連結する
let myName3 = myName1 + myName2;
console.log(myName3);

/*
数値について
	数値とは、123の様な整数や123.4の様な実数のことです。
	数値データ同士を使って計算させる事ができます。

	様々な演算子を使うことができます。
		+ (プラス)で足し算
		- (マイナス)で引き算
		* (アスタリスク)で掛け算
		/ (スラッシュ)で割り算
		% (パーセント)で余り
	() カッコを使うことで計算順序を制御する事ができます。
	
	++ (プラスプラス)で、変数の値に+1する事ができます。
		変数名++;
	-- (マイナスマイナス)で、変数の値に-1する事ができます。
		変数名--;
*/

// 変数を宣言する
let myNum1 = 50;
console.log(myNum1);

// 足し算
let myNum2 = 50 + 10;
console.log(myNum2);

// 引き算
let myNum3 = 50 - 10;
console.log(myNum3);

// 変数同士で計算させる
let myNum4 = myNum1 + myNum2 + myNum3;
console.log(myNum4);

/*
インクリメントとデクリメント
	++ (プラスプラス)で、変数の値に+1する事ができます。
		変数名++;
	-- (マイナスマイナス)で、変数の値に-1する事ができます。
		変数名--;
*/

// インクリメント
let myNum5 = 100;
myNum5++;
console.log(myNum5);// 101になる

// デクリメント
let myNum6 = 100;
myNum6--;
console.log(myNum6);// 99になる

/*
真偽値について
	真偽値とは、true(真)かfalse(偽)、いずれかの値の事です。
	この真偽値を使って分岐処理を実現します。
*/

// 変数を宣言する
let myBoolean1 = true;
console.log(myBoolean1);

// 変数を宣言する
let myBoolean2 = false;
console.log(myBoolean2);

/* ====================================================================== */

/*
配列について
	配列は、一度に複数のデータを格納する事ができます。
	[] (角かっこ)で囲み、, (カンマ)で区切ります。
	それぞれの要素には、先頭から、
	[0], [1], [2] の様に[数値]を使ってアクセスします。
*/

// 配列を宣言する
let myFamily = ["サザエ", "マスオ", "タラオ"];
console.log(myFamily);// 配列全体を確認する

// 配列の要素にアクセスする
console.log(myFamily[0]);// サザエ
console.log(myFamily[1]);// サザエ
console.log(myFamily[2]);// タラオ
console.log(myFamily[3]);// これはアクセスできない

/*
配列の操作について
	配列に格納されたデータを操作する事ができます。

	要素を直接変更する
		配列名[インデックス] = データ;

	追加する
		push (配列の後ろに追加)
		unshift (配列の最初に追加)
	削除する
		pop (配列の最後を1つ削除)
		shift (配列の最初を削除)

	lengthプロパティにアクセスすると、配列の要素の合計を取得する事ができます。
*/

myFamily[1] = "アナゴ";// 1番を変更する
console.log(myFamily);

myFamily.push("カツオ");// 後ろに追加
console.log(myFamily);

myFamily.push("ワカメ");// 後ろに追加
console.log(myFamily);

myFamily.unshift("フネ");// 前に追加
console.log(myFamily);

myFamily.unshift("ナミヘイ");// 前に追加
console.log(myFamily);

myFamily.pop();// 後ろを1つ削除
console.log(myFamily);

myFamily.shift();// 前を1つ削除
console.log(myFamily);

console.log(myFamily.length);// 配列の総数

/* ====================================================================== */

/*
比較演算子について
	比較演算子を使うことで、2つのデータを比較する事ができます。
	比較した結果は真偽値(trueかfalseのいずれか)になります。

		=== (イコールx3)
			2つの値が同じだった場合はtrue、違う場合はfalse
		< (小なり)
			両辺のを比較し、左がより小さい場合はtrue、違う場合はfalse
		> (大なり)
			両辺のを比較し、左がより大きい場合はtrue、違う場合はfalse
*/

// 変数を宣言する
let myName = "サザエ";

// myNameの値が"サザエ"だったらtrue
let myBoolean1 = myName === "サザエ";
console.log(myBoolean1);// これはtrue

// myNameの値が"マスオ"だったらtrue
let myBoolean2 = myName === "マスオ";
console.log(myBoolean2);// これはfalse

// 変数を宣言する
let myMoney = 500;

// myMoneyの値が1000より小さかった場合はtrue
let myBoolean3 = myMoney < 1000;
console.log(myBoolean3);// これはtrue

// myMoneyの値が1000より大きかった場合はtrue
let myBoolean4 = myMoney > 1000;
console.log(myBoolean4);// これはfalse

/*
繰り返し文について
	"for"キーワードを使う事で、特定の回数だけ処理を繰り返す事ができます。

		例:
			for(初期化; 繰り返し条件; 後処理){実行したい処理}

				初期化
					繰り返し処理を行う直前に1度だけ実行されます
					カウンターの初期化を行います
				繰り返し条件
					処理を実行するかどうかを判定します
					カウンターの値が条件に一致するかを判定します
				後処理
					処理を1度実行した後、1度だけ実行します
					カウンターの値を+1もしくは-1させます

		"for"文は、繰り返し条件が満たされている(true)限り実行され続けます。
		無限ループに陥らない様に気を付けましょう。
*/

// 繰り返し文
//   初期化 -> 変数iを宣言し、0にする
//   繰り返し条件 -> 変数iの値が5より小さいかどうかを判定
//   後処理 -> 処理を実行した後、カウンターiに+1する
for(let i=0; i<5; i++){
	console.log(i);// カウンターiの値を確認する
}

/*
関数について1
	"function"キーワードを使う事で、処理を一つにまとめる事ができます。
	何度も同じ処理を実行したい場合に利用します。

		例:
			関数を用意する
				function 関数名(){実行したい処理}
			
			関数を実行する
				関数名();
*/

// 関数を用意する
function sayHello1(){
	console.log("買い物しようと");
}

// 関数を実行する
sayHello1();
sayHello1();
sayHello1();

/* ====================================================================== */

/*
引数について2
	引数使う事で、関数の実行内容を変更する事ができます。
	様々なデータによって処理に変化をつけたい場合に利用します。
	関数に用意した引数は、{}の間で変数として扱います。
	引数は、, (カンマ)を使って複数設定する事ができます。

		例:
			関数を用意する
				function 関数名(引数){実行したい処理}
			
			関数を実行する
				関数名(データ);
*/

// 関数を用意する
function sayHello1(place){
	console.log("買い物しようと" + place + "まで出かけたら");
}

// 関数を実行する
sayHello1("街");
sayHello1("怪しげな夜の繁華街");
sayHello1("銀行");

// 関数を用意する
function sayHello2(item, name){
	console.log(item + "を忘れて愉快な" + name + "さん");
}

// 関数を実行する
sayHello2("財布", "サザエ");
sayHello2("自身が人妻である事", "フネ");
sayHello2("カラシニコフ", "ワカメ");

/* ====================================================================== */

/*
関数について3
	"return"キーワードを使うことで、
	複雑な計算等を関数で行いその結果を返す事ができます。
	引数と組み合わせて使う事で、汎用性の高い関数を作る事ができます。

		例:
			関数を用意する
				function 関数名(引数){
					return 実行した結果の値
				}
			
			関数を実行する
				関数名(データ);
*/

// 関数を用意する
function getMoney1(num){
	// 2倍にした値をres変数に格納
	let res = num * 2;
	return res;// res変数の値を返す
}

// 関数を実行する
let money1 = getMoney1(100);
console.log(money1);// 200

// 関数を用意する
function getMoney2(numA, numB){
	// numAとnumBを足した値をres変数に格納
	let res = numA + numB;
	return res;// res変数の値を返す
}

// 関数を実行する
let money2 = getMoney2(200, 300);
console.log(money2);// 500

/* ====================================================================== */







/*
オブジェクトについて

	オブジェクトとは!?
		関連のあるデータと命令の集合

Dateオブジェクトを使ってみよう

	Dateオブジェクトを使うことで、日付や時間を取得することができます。

	年を取得する命令
		getFullYear()
	月を取得する命令
		getMonth()
	日を取得する命令
		getDate()

使い方
	
	1, オブジェクトを初期化する(newキーワード)
	2, オブジェクトを実行する

*/

// Dateオブジェクトを初期化
let myDate = new Date();

// 年を取得
let year = myDate.getFullYear();
console.log(year);

// 月を取得
let month = myDate.getMonth();
console.log(month);

// 日を取得
let date = myDate.getDate();
console.log(date);

// 1970年01月01日からの経過時間(ミリ秒)
let mill = myDate.getTime();
console.log(mill);

// 曜日
const arr = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
let dow = arr[myDate.getDay()];
console.log(dow);

